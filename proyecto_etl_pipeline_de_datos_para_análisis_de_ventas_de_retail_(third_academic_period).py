# -*- coding: utf-8 -*-
"""Proyecto ETL - Pipeline de Datos para An√°lisis de Ventas de Retail (Third Academic Period).ipynb

Luis Ernesto Caro Barrera - Daniel Esteban Lopez Suarez

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hK90t6g_oHHubV9MIBDoRhAmjhxsZzwQ

FASE 1. CARGAR ARCHIVOS
"""

from google.colab import files

# Sube los 3 archivos manualmente desde tu PC
uploaded = files.upload()

"""Fase 1: Extracci√≥n (E)
Cargar datos desde los 3 archivos CSV usando pandas
Implementar manejo de errores (archivos no encontrados, formato incorrecto)
Mostrar estad√≠sticas b√°sicas de carga (n√∫mero de registros por archivo)

"""

import pandas as pd

# Diccionario con nombres de archivos
archivos = {
    "ventas": "ventas_crudas.csv",
    "productos": "productos.csv",
    "tiendas": "tiendas.csv"
}

# Funci√≥n con manejo de errores
def cargar_csv(nombre, ruta):
    try:
        df = pd.read_csv(ruta)
        print(f"Archivo '{ruta}' cargado correctamente.")
        print(f"   ‚Üí Registros cargados: {len(df)}\n")
        return df

    except FileNotFoundError:
        print(f"Error: El archivo '{ruta}' no fue encontrado.\n")
        return pd.DataFrame()

    except pd.errors.EmptyDataError:
        print(f"Error: El archivo '{ruta}' est√° vac√≠o o mal formado.\n")
        return pd.DataFrame()

    except pd.errors.ParserError:
        print(f"Error: El archivo '{ruta}' tiene un formato incorrecto.\n")
        return pd.DataFrame()

# Cargar los tres CSV
ventas_df = cargar_csv("ventas", archivos["ventas"])
productos_df = cargar_csv("productos", archivos["productos"])
tiendas_df = cargar_csv("tiendas", archivos["tiendas"])

# Mostrar estad√≠sticas b√°sicas
print("ESTAD√çSTICAS DE CARGA")
print("-" * 40)
print(f"Ventas:   {ventas_df.shape[0]} registros, {ventas_df.shape[1]} columnas")
print(f"Productos:{productos_df.shape[0]} registros, {productos_df.shape[1]} columnas")
print(f"Tiendas:  {tiendas_df.shape[0]} registros, {tiendas_df.shape[1]} columnas")
print("-" * 40)

# Vista previa
print("\nEjemplo de registros cargados:")
ventas_df.head()

"""Fase 2: Transformaci√≥n (T)
Limpieza de datos:
Corregir formatos de fecha inconsistentes
Manejar valores nulos en cliente_id(asignar "CLIENTE_DESCONOCIDO")
Validar que no existan IDs duplicados
C√°lculo de m√©tricas:
Calcular venta_total(cantidad √ó precio_unitario)
Crear categor√≠as de venta (Baja: <$20, Media: $20-$50, Alta: ‚â•$50)
Enriquecimiento de datos:
Unir informaci√≥n de productos y tiendas
Crear dimensiones temporales (a√±o, mes, d√≠a de la semana)
Control de calidad:
Verificar integridad referencial entre tablas
Validar rangos de datos (cantidades positivas, fechas v√°lidas)
"""

# ================================================================
# FASE 2: TRANSFORMACI√ìN (T)
# ================================================================

import pandas as pd
import numpy as np

# ------------------------------------------------
# 1. LIMPIEZA DE DATOS
# ------------------------------------------------

# 1.1 Corregir formatos de fecha inconsistentes
ventas_df['fecha'] = pd.to_datetime(ventas_df['fecha'], errors='coerce')  # convierte fechas; pone NaT si no puede

# 1.2 Manejar valores nulos en cliente_id
ventas_df['cliente_id'] = ventas_df['cliente_id'].fillna("CLIENTE_DESCONOCIDO")
ventas_df.loc[ventas_df['cliente_id'] == "", 'cliente_id'] = "CLIENTE_DESCONOCIDO"

# 1.3 Validar que no existan order_id duplicados
duplicados = ventas_df[ventas_df['order_id'].duplicated()]
if len(duplicados) > 0:
    print(f"Se encontraron {len(duplicados)} registros duplicados en 'order_id'.")
    ventas_df = ventas_df.drop_duplicates(subset='order_id', keep='first')
else:
    print("No hay IDs de pedido duplicados en 'ventas'.")

# ------------------------------------------------
# 2. C√ÅLCULO DE M√âTRICAS
# ------------------------------------------------

# 2.1 Calcular venta_total (cantidad √ó precio_unitario)
ventas_df['venta_total'] = ventas_df['cantidad'] * ventas_df['precio_unitario']

# 2.2 Crear categor√≠as de venta
def clasificar_venta(valor):
    if valor < 20:
        return 'Baja'
    elif valor < 50:
        return 'Media'
    else:
        return 'Alta'

ventas_df['categoria_venta'] = ventas_df['venta_total'].apply(clasificar_venta)

# ------------------------------------------------
# 3. ENRIQUECIMIENTO DE DATOS
# ------------------------------------------------

# 3.1 Unir informaci√≥n de productos y tiendas
ventas_enriquecidas = ventas_df.merge(productos_df, on='producto_id', how='left')
ventas_enriquecidas = ventas_enriquecidas.merge(tiendas_df, on='tienda_id', how='left')

# 3.2 Crear dimensiones temporales
ventas_enriquecidas['a√±o'] = ventas_enriquecidas['fecha'].dt.year
ventas_enriquecidas['mes'] = ventas_enriquecidas['fecha'].dt.month
ventas_enriquecidas['dia_semana'] = ventas_enriquecidas['fecha'].dt.day_name()

# ------------------------------------------------
# 4. CONTROL DE CALIDAD
# ------------------------------------------------

# 4.1 Verificar integridad referencial entre tablas
productos_faltantes = ventas_enriquecidas[ventas_enriquecidas['categoria'].isna()]
tiendas_faltantes = ventas_enriquecidas[ventas_enriquecidas['ciudad'].isna()]

if len(productos_faltantes) == 0 and len(tiendas_faltantes) == 0:
    print("Integridad referencial verificada: no hay productos o tiendas desconocidas.")
else:
    print("Existen registros con referencias a productos o tiendas inexistentes:")
    if len(productos_faltantes) > 0:
        print(f"   ‚Üí {len(productos_faltantes)} producto(s) sin coincidencia.")
    if len(tiendas_faltantes) > 0:
        print(f"   ‚Üí {len(tiendas_faltantes)} tienda(s) sin coincidencia.")

# 4.2 Validar rangos de datos
errores_cantidad = ventas_enriquecidas[ventas_enriquecidas['cantidad'] <= 0]
errores_fecha = ventas_enriquecidas[ventas_enriquecidas['fecha'].isna()]

if errores_cantidad.empty and errores_fecha.empty:
    print("Todas las cantidades son positivas y las fechas son v√°lidas.")
else:
    print("Se encontraron valores fuera de rango:")
    if not errores_cantidad.empty:
        print(f"   ‚Üí {len(errores_cantidad)} con cantidad <= 0")
    if not errores_fecha.empty:
        print(f"   ‚Üí {len(errores_fecha)} con fechas inv√°lidas")

# ------------------------------------------------
# 5. RESULTADO FINAL
# ------------------------------------------------
print("\nDataset transformado:")
display(ventas_enriquecidas.head(10))

print("\nResumen de categor√≠as de venta:")
print(ventas_enriquecidas['categoria_venta'].value_counts())

# Guardar el dataset transformado
ventas_enriquecidas.to_csv("ventas_transformadas.csv", index=False)
print("\nArchivo 'ventas_transformadas.csv' generado correctamente.")

"""Fase 3: Carga (L)
Guardar dataset transformado completo (csv)
Crear Data Mart optimizado para an√°lisis (csv)
Generar resumen ejecutivo agregado (csv)
"""

# ==========================================
# üì¶ FASE 3: CARGA (L) ‚Äì para Google Colab
# ==========================================
import pandas as pd
import numpy as np
import os

# --- üìÇ Archivos de entrada (subidos a Colab) ---
ventas_csv_path = "ventas_crudas.csv"
productos_csv_path = "productos.csv"
tiendas_csv_path = "tiendas.csv"

# --- üìÇ Archivos de salida ---
out_transformed = "ventas_transformadas.csv"
out_fact = "datamart_fact_ventas.csv"
out_dim_producto = "datamart_dim_producto.csv"
out_dim_tienda = "datamart_dim_tienda.csv"
out_dim_tiempo = "datamart_dim_tiempo.csv"
out_resumen = "resumen_ejecutivo.csv"


# =====================================================
# Funci√≥n segura para cargar cada CSV con manejo de errores
# =====================================================
def cargar_csv_seguro(path):
    if not os.path.exists(path):
        print(f"‚ùå Archivo no encontrado: {path}")
        return pd.DataFrame()
    try:
        df = pd.read_csv(path)
        print(f"‚úÖ Cargado: {path} (rows={len(df)})")
        return df
    except Exception as e:
        print(f"‚ùå Error leyendo {path}: {e}")
        return pd.DataFrame()


# =====================================================
# CARGA DE LOS ARCHIVOS
# =====================================================
ventas_df = cargar_csv_seguro(ventas_csv_path)
productos_df = cargar_csv_seguro(productos_csv_path)
tiendas_df = cargar_csv_seguro(tiendas_csv_path)

if ventas_df.empty or productos_df.empty or tiendas_df.empty:
    print("\n‚ö†Ô∏è No se pudo continuar: revisa que los CSV fuente existan y sean v√°lidos.")
else:
    # =====================================================
    # üîß TRANSFORMACIONES FINALES
    # =====================================================
    ventas_df['fecha'] = pd.to_datetime(ventas_df['fecha'], errors='coerce')
    ventas_df['cliente_id'] = ventas_df['cliente_id'].fillna("CLIENTE_DESCONOCIDO")
    ventas_df.loc[ventas_df['cliente_id'] == "", 'cliente_id'] = "CLIENTE_DESCONOCIDO"
    ventas_df = ventas_df.drop_duplicates(subset='order_id', keep='first')

    ventas_df['venta_total'] = ventas_df['cantidad'] * ventas_df['precio_unitario']

    def clasificar_venta(v):
        if pd.isna(v): return "Desconocido"
        if v < 20: return "Baja"
        elif v < 50: return "Media"
        else: return "Alta"

    ventas_df['categoria_venta'] = ventas_df['venta_total'].apply(clasificar_venta)

    ventas_enriq = ventas_df.merge(productos_df, on='producto_id', how='left')
    ventas_enriq = ventas_enriq.merge(tiendas_df, on='tienda_id', how='left')

    ventas_enriq['a√±o'] = ventas_enriq['fecha'].dt.year
    ventas_enriq['mes'] = ventas_enriq['fecha'].dt.month
    ventas_enriq['dia'] = ventas_enriq['fecha'].dt.day
    ventas_enriq['dia_semana'] = ventas_enriq['fecha'].dt.day_name()

    # Guardar dataset transformado
    ventas_enriq.to_csv(out_transformed, index=False)
    print(f"\nüíæ Transformado guardado en: {out_transformed} ({len(ventas_enriq)} filas)")


    # =====================================================
    # üìä CREAR DATA MART (FACT + DIM)
    # =====================================================
    fact = ventas_enriq.copy()
    fact['mes_a√±o'] = fact['fecha'].dt.to_period('M').astype(str)

    fact_agg = (
        fact.groupby(['tienda_id','producto_id','mes_a√±o'], dropna=False)
            .agg(
                total_ventas=('venta_total','sum'),
                unidades_vendidas=('cantidad','sum'),
                transacciones=('order_id','nunique'),
                ticket_promedio=('venta_total','mean')
            )
            .reset_index()
    )
    fact_agg.to_csv(out_fact, index=False)
    print(f"üíæ Fact (agregado) guardado en: {out_fact} ({len(fact_agg)} filas)")

    # Dim producto
    dim_producto = productos_df.copy()
    dim_producto['producto_key'] = dim_producto['producto_id']
    dim_producto.to_csv(out_dim_producto, index=False)
    print(f"üíæ Dim producto guardada en: {out_dim_producto}")

    # Dim tienda
    dim_tienda = tiendas_df.copy()
    dim_tienda['tienda_key'] = dim_tienda['tienda_id']
    dim_tienda.to_csv(out_dim_tienda, index=False)
    print(f"üíæ Dim tienda guardada en: {out_dim_tienda}")

    # Dim tiempo
    dim_tiempo = (
        ventas_enriq[['fecha']]
        .dropna().drop_duplicates().reset_index(drop=True)
    )
    dim_tiempo['a√±o'] = dim_tiempo['fecha'].dt.year
    dim_tiempo['mes'] = dim_tiempo['fecha'].dt.month
    dim_tiempo['dia'] = dim_tiempo['fecha'].dt.day
    dim_tiempo['dia_semana'] = dim_tiempo['fecha'].dt.day_name()
    dim_tiempo.to_csv(out_dim_tiempo, index=False)
    print(f"üíæ Dim tiempo guardada en: {out_dim_tiempo}")

    # =====================================================
    # üßæ RESUMEN EJECUTIVO
    # =====================================================
    total_ventas = ventas_enriq['venta_total'].sum()
    total_unidades = ventas_enriq['cantidad'].sum()
    promedio_ticket = ventas_enriq['venta_total'].mean()

    ventas_por_region = (
        ventas_enriq.groupby('region', dropna=False)['venta_total']
        .sum().reset_index().sort_values('venta_total', ascending=False)
    )

    top_productos = (
        ventas_enriq.groupby('producto_id')['venta_total']
        .sum().reset_index().sort_values('venta_total', ascending=False).head(5)
    )

    ventas_por_categoria = ventas_enriq.groupby('categoria_venta')['venta_total'].sum().reset_index()

    resumen_rows = [
        ("total_ventas", round(total_ventas,2)),
        ("total_unidades", int(total_unidades)),
        ("promedio_ticket", round(promedio_ticket,2))
    ]

    for rank, (_, row) in enumerate(ventas_por_region.head(5).iterrows(), start=1):
        region_name = row['region'] if pd.notna(row['region']) else "Sin regi√≥n"
        resumen_rows.append((f"top_region_{rank}", region_name))
        resumen_rows.append((f"top_region_{rank}_ventas", round(row['venta_total'],2)))

    for rank, (_, r) in enumerate(top_productos.iterrows(), start=1):
        resumen_rows.append((f"top_producto_{rank}", r['producto_id']))
        resumen_rows.append((f"top_producto_{rank}_ventas", round(r['venta_total'],2)))

    for _, r in ventas_por_categoria.iterrows():
        resumen_rows.append((f"venta_categoria_{r['categoria_venta']}", round(r['venta_total'],2)))

    resumen_df = pd.DataFrame(resumen_rows, columns=["metric","value"])
    resumen_df.to_csv(out_resumen, index=False)
    print(f"üíæ Resumen ejecutivo guardado en: {out_resumen}")

    # =====================================================
    # ‚úÖ Descarga de resultados (Colab)
    # =====================================================
    from google.colab import files
    files.download(out_transformed)
    files.download(out_fact)
    files.download(out_dim_producto)
    files.download(out_dim_tienda)
    files.download(out_dim_tiempo)
    files.download(out_resumen)

"""Fase 4: An√°lisis y Reportes
Visualizaciones:
Gr√°fico de barras: Ventas totales por ciudad
Gr√°fico de pie: Distribuci√≥n de ventas por categor√≠a
Gr√°fico de barras: Transacciones por d√≠a de la semana
Histograma: Distribuci√≥n de montos de venta
Reporte ejecutivo:
M√©tricas principales de negocio
Top performers (ciudad y categor√≠a l√≠der)
Indicadores de calidad de datos
Guardar reporte en archivo de texto
"""

# ============================================
# FASE 4: AN√ÅLISIS Y REPORTES (A)
# ============================================

import pandas as pd
import matplotlib.pyplot as plt

# -----------------------------
# 1Ô∏è‚É£ Cargar dataset transformado
# -----------------------------
df = pd.read_csv("ventas_transformadas.csv")

# -----------------------------
# 2Ô∏è‚É£ Visualizaciones
# -----------------------------
plt.style.use('seaborn-v0_8')

# --- Gr√°fico de barras: Ventas totales por ciudad
ventas_por_ciudad = df.groupby("ciudad")["venta_total"].sum().sort_values(ascending=False)
ventas_por_ciudad.plot(kind="bar", figsize=(8,4), title="Ventas Totales por Ciudad")
plt.ylabel("Total Ventas ($)")
plt.xlabel("Ciudad")
plt.tight_layout()
plt.savefig("grafico_ventas_por_ciudad.png")
plt.show()

# --- Gr√°fico de pie: Distribuci√≥n de ventas por categor√≠a
ventas_por_categoria = df.groupby("categoria")["venta_total"].sum()
ventas_por_categoria.plot(kind="pie", autopct="%1.1f%%", figsize=(6,6), title="Distribuci√≥n de Ventas por Categor√≠a")
plt.ylabel("")
plt.tight_layout()
plt.savefig("grafico_ventas_por_categoria.png")
plt.show()

# --- Gr√°fico de barras: Transacciones por d√≠a de la semana
transacciones_dia = df.groupby("dia_semana")["order_id"].count().reindex([
    "Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"
])
transacciones_dia.plot(kind="bar", figsize=(8,4), title="Transacciones por D√≠a de la Semana")
plt.ylabel("N√∫mero de Transacciones")
plt.xlabel("D√≠a de la Semana")
plt.tight_layout()
plt.savefig("grafico_transacciones_por_dia.png")
plt.show()

# --- Histograma: Distribuci√≥n de montos de venta
plt.figure(figsize=(8,4))
plt.hist(df["venta_total"], bins=10, edgecolor="black")
plt.title("Distribuci√≥n de Montos de Venta")
plt.xlabel("Monto de Venta ($)")
plt.ylabel("Frecuencia")
plt.tight_layout()
plt.savefig("histograma_venta_total.png")
plt.show()

# -----------------------------
# 3Ô∏è‚É£ Reporte Ejecutivo
# -----------------------------

# --- M√©tricas principales
total_ventas = df["venta_total"].sum()
promedio_venta = df["venta_total"].mean()
total_transacciones = len(df)
total_clientes = df["cliente_id"].nunique()

# --- Top performers
top_ciudad = ventas_por_ciudad.idxmax()
top_categoria = ventas_por_categoria.idxmax()

# --- Indicadores de calidad de datos
valores_nulos = df.isnull().sum().sum()
ids_duplicados = df["order_id"].duplicated().sum()

# Crear reporte en texto
reporte = f"""
=====================================
REPORTE EJECUTIVO DE VENTAS
=====================================

Registros analizados: {total_transacciones}
Clientes √∫nicos: {total_clientes}

Total de ventas: ${total_ventas:,.2f}
Promedio por transacci√≥n: ${promedio_venta:,.2f}

Ciudad l√≠der en ventas: {top_ciudad}
Categor√≠a l√≠der: {top_categoria}

-------------------------------------
Indicadores de calidad de datos
-------------------------------------
Valores nulos detectados: {valores_nulos}
IDs duplicados: {ids_duplicados}

-------------------------------------
Archivos generados
-------------------------------------
- grafico_ventas_por_ciudad.png
- grafico_ventas_por_categoria.png
- grafico_transacciones_por_dia.png
- histograma_venta_total.png

=====================================
"""

# Guardar el reporte
with open("reporte_ejecutivo.txt", "w", encoding="utf-8") as f:
    f.write(reporte)

print(reporte)
print("Reporte guardado como 'reporte_ejecutivo.txt'")
